package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"sync/atomic"
	"time"

	"github.com/google/uuid"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	"github.com/peethree/chirpy/internal/database"
)

// struct for keeping track server hits, atomic.Int32 has various methods to change the value
// *database.Queries generated by sqlc
type apiConfig struct {
	fileserverHits atomic.Int32
	db             *database.Queries
	dev            string
}

// struct for making new users and getting their email address
type requestUserParams struct {
	Email string `json:"email"`
}

// response struct for creating new users
type User struct {
	Id         uuid.UUID `json:"id"`
	Created_at time.Time `json:"created_at"`
	Updated_at time.Time `json:"updated_at"`
	Email      string    `json:"email"`
}

type requestParameters struct {
	Body string `json:"body"`
}

type responseParameters struct {
	Error        string `json:"error"`
	Valid        bool   `json:"valid"`
	Cleaned_body string `json:"cleaned_body"`
}

func main() {
	// get .env file
	godotenv.Load()

	// get the connection url from .env file
	dbURL := os.Getenv("DB_URL")
	if dbURL == "" {
		log.Fatal("DB_URL must be set")
	}

	// check if .env platform is set to dev
	devCheck := os.Getenv("PLATFORM")

	// open connection to db
	db, err := sql.Open("postgres", dbURL)
	if err != nil {
		log.Fatalf("Error opening database: %s", err)
	}

	// create new *database.Queries and store it in apiCfg
	dbQueries := database.New(db)

	// initialize apiCfg
	apiCfg := apiConfig{
		fileserverHits: atomic.Int32{},
		db:             dbQueries,
		dev:            devCheck,
	}

	// create new serve mux
	mux := http.NewServeMux()

	// register handlers
	mux.HandleFunc("GET /api/healthz", healthzHandler)
	// mux.HandleFunc("GET /api/metrics", apiCfg.serverHitsHandler)
	mux.HandleFunc("POST /admin/reset", apiCfg.resetHandler)
	mux.HandleFunc("GET /admin/metrics", apiCfg.adminMetricsHandler)
	mux.HandleFunc("POST /api/validate_chirp", validateChirpHandler)
	mux.HandleFunc("POST /api/users", apiCfg.createUserHandler)

	// use serve mux method to register fileserver handler for rootpath "/app/"
	// strip prefix from the request path before passing it to the fileserver handler
	mux.Handle("/app/", apiCfg.middlewareMetricsInc(http.StripPrefix("/app", http.FileServer(http.Dir(".")))))

	// create new http.Server struct
	server := &http.Server{
		Addr:    ":8080",
		Handler: mux,
	}

	// Use the server's ListenAndServe method to start the server
	server.ListenAndServe()
}

// custom handler function
func healthzHandler(w http.ResponseWriter, r *http.Request) {
	//write Content-Type: text/plain; charset=utf-8
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")

	// write status code
	w.WriteHeader(http.StatusOK)

	// write body
	w.Write([]byte("OK"))
}

func (cfg *apiConfig) createUserHandler(w http.ResponseWriter, r *http.Request) {
	// decode JSON for email
	decoder := json.NewDecoder(r.Body)
	params := requestUserParams{}
	err := decoder.Decode(&params)
	if err != nil {
		http.Error(w, "Invalid Json", http.StatusBadRequest)
	}

	// populate response
	response := User{
		Id:         uuid.New(),
		Created_at: time.Now(),
		Updated_at: time.Now(),
		Email:      params.Email,
	}

	if len(params.Email) > 0 {
		// encode response
		dat, err := json.Marshal(response)
		if err != nil {
			log.Printf("Error marshalling JSON: %s", err)
			w.WriteHeader(500)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		w.Write(dat)
	}
}

func validateChirpHandler(w http.ResponseWriter, r *http.Request) {
	// decode the JSON body
	decoder := json.NewDecoder(r.Body)
	params := requestParameters{}
	err := decoder.Decode(&params)
	if err != nil {
		http.Error(w, "Invalid Json", http.StatusBadRequest)
	}

	// check length of json body, cannot exceed 140 chars
	if len(params.Body) <= 140 && len(params.Body) > 0 {

		// response for accepted body
		response := responseParameters{
			Valid:        true,
			Cleaned_body: replaceProfanity(params.Body),
		}
		statusCode := 200
		// encode response
		encodeResponse(w, response, statusCode)
	}

	if len(params.Body) == 0 {
		response := responseParameters{
			Error: "Chirp can't be 0 characters",
			Valid: false,
		}
		statusCode := 400
		encodeResponse(w, response, statusCode)
	}

	if len(params.Body) > 140 {
		response := responseParameters{
			Error: "Chirp is too long",
			Valid: false,
		}
		statusCode := 400
		encodeResponse(w, response, statusCode)
	}
}

// helper function to clean profanity
func replaceProfanity(p string) string {

	// the no-no words
	profanity := []string{"kerfuffle", "sharbert", "fornax"}

	// split up string
	inputStringList := strings.Split(p, " ")

	// check the input string for profanity, replace with **** if it matches profanity
	for _, word := range profanity {
		for i, input := range inputStringList {
			if strings.EqualFold(word, input) {
				inputStringList[i] = "****"
			}
		}
	}

	result := strings.Join(inputStringList, " ")

	return result
}

// helper function to reduce copying code
func encodeResponse(w http.ResponseWriter, response responseParameters, statusCode int) {
	dat, err := json.Marshal(response)
	if err != nil {
		log.Printf("Error marshalling JSON: %s", err)
		w.WriteHeader(500)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)
	w.Write(dat)
}

// method on apiConfig struct handler
// func (cfg *apiConfig) serverHitsHandler(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
// 	w.WriteHeader(http.StatusOK)

// 	// write the amount of server hits
// 	hitNumber := fmt.Sprintf("Hits: %v", cfg.fileserverHits.Load())
// 	w.Write([]byte(hitNumber))
// }

func (cfg *apiConfig) adminMetricsHandler(w http.ResponseWriter, r *http.Request) {
	// set header to html so page knows how to render it
	w.Header().Set("Content-Type", "text/html; charset=utf-8")

	// template
	template := `
    <html>
      <body>
        <h1>Welcome, Chirpy Admin</h1>
        <p>Chirpy has been visited %d times!</p>
      </body>
    </html>`

	// amount of visits
	hits := cfg.fileserverHits.Load()

	// populate %d of tge template
	html := fmt.Sprintf(template, hits)

	w.WriteHeader(http.StatusOK)

	w.Write([]byte(html))
}

// reset method handler that sets hitnumber to 0 and removes all the users
func (cfg *apiConfig) resetHandler(w http.ResponseWriter, r *http.Request) {
	if cfg.dev != "dev" {
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		w.WriteHeader(403)
		w.Write([]byte("Must be dev for this api endpoint."))
	} else {
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		w.WriteHeader(http.StatusOK)
		// sets hits to 0
		cfg.fileserverHits.Store(0)
		// delete users
		//
		w.Write([]byte("Hits reset to 0, users deleted"))
	}
}

// middleware method that increments the fileserverHits counter every time it's called
func (cfg *apiConfig) middlewareMetricsInc(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		cfg.fileserverHits.Add(1)
		next.ServeHTTP(w, r)
	})
}
